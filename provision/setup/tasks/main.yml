- name: Install base packages
  apt: name={{ item }} update_cache={{ update_apt_cache }} force=yes state=installed
  with_items:
    - build-essential
    - acl
    - ntp
    - htop
    - git
    - libpq-dev
    - python-dev
    - python-pip
    - python-pycurl
    - nginx
    - gunicorn
  tags: packages

- name: Upgrade pip
  pip: name=pip state=latest
  tags: packages

- name: Add the PostgreSQL public GPG key to the apt repo
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc
           state=present

- name: Add PostgreSQL to the sources list
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main'
                  update_cache={{ update_apt_cache }}
                  state=present

- name: Install PostgreSQL
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql
    - postgresql-contrib
    - python-psycopg2
  tags: packages

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Ensure database is created
  become_user: postgres
  postgresql_db: name={{ db_name }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present

- name: Ensure user has access to the database
  become_user: postgres
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   priv=ALL
                   state=present

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  postgresql_user: name={{ db_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present

- name: Install project dependencies
  pip: requirements={{ project_path }}/requirements.txt
  notify:
      - reload systemd
      - restart gunicorn

- name: remove default nginx site
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: copy nginx config
  template: src=files/nginx.j2 dest=/etc/nginx/sites-enabled/{{ project_name }}.conf
  notify:
      - restart nginx

- name: Django make migrations
  django_manage: >
      command=makemigrations
      app_path={{ project_path }}

- name: Django migrate
  django_manage: >
      command=migrate
      app_path={{ project_path }}

- name: copy gunicorn config
  template: src=files/gunicorn.j2 dest=/etc/systemd/system/gunicorn.service
  notify:
  - reload systemd
  - restart gunicorn
  

- name: Nginx server is running
  service: name=nginx state=started enabled=yes

- name: Gunicorn server is running
  service: name=gunicorn state=started enabled=yes

